<?php

namespace App\Controller\Admin\Crud;

use App\Entity\Employee;
use App\Entity\User\AbstractedUser;
use App\Entity\User\Enum\Status;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\Filters;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\EmailField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TelephoneField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Filter\EntityFilter;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;
use ReflectionClass;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\RepeatedType;
use App\UseCase\Admin;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\PasswordHasher\PasswordHasherInterface;
use Symfony\Component\Routing\Annotation\Route;

class EmployeeCrudController extends UserCrudController
{
    public function __construct(private readonly PasswordHasherInterface $passwordHasher, private readonly AdminUrlGenerator $adminUrlGenerator)
    {
        parent::__construct($passwordHasher, $adminUrlGenerator);
    }

    public static function getEntityFqcn(): string
    {
        return Employee::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityLabelInPlural('Сотрудники')
            ->setEntityLabelInSingular('Сотрудник');
    }

    /**
     * @throws \ReflectionException
     */
    public function createEntity(string $entityFqcn)
    {
        $client = (new ReflectionClass(Employee::class))->newInstanceWithoutConstructor();
        $client->addRole(AbstractedUser::ROLE_EMPLOYEE);
        $client->setStatus(Status::STATUS_WAIT->value);
        return $client;
    }

    public function configureFields(string $pageName): iterable
    {
        $fields = [
            IdField::new('id')->hideOnForm(),
            TextField::new('firstName')->setLabel('Фамилия'),
            TextField::new('lastName')->setLabel('Имя'),
            TextField::new('middleName')->setLabel('Отчество'),
            AssociationField::new('position')->setLabel('Должность')
                ->setCrudController(PositionCrudController::class),
            TelephoneField::new('phone')->setLabel('Телефон'),
            TextField::new('status')->onlyOnDetail()->setLabel('Статус'),
            EmailField::new('email'),
        ];

        $password = TextField::new('password')
            ->setLabel('Пароль')
            ->setFormType(RepeatedType::class)
            ->setFormTypeOptions([
                'type' => PasswordType::class,
                'first_options' => ['label' => 'Пароль'],
                'second_options' => ['label' => 'Повторите пароль'],
                'mapped' => false,
            ])
            ->setRequired($pageName === Crud::PAGE_NEW)
            ->onlyOnForms();

        $fields[] = $password;

        return $fields;
    }

    public function configureFilters(Filters $filters, ?bool $fromChild = false): Filters
    {
        $filters = parent::configureFilters($filters, true);
        $filters->add(EntityFilter::new('position'));
        return $filters;
    }

    public function configureActions(Actions $actions, ?bool $fromChild = false): Actions
    {
        $removeEmployee = Action::new('Уволить')
            ->setIcon('fa fa-trash')
            ->setCssClass('btn btn-danger action-foo')
            ->linkToCrudAction('removeEmployee');

        return parent::configureActions($actions, true)
            ->add(Crud::PAGE_INDEX, $removeEmployee); // TODO: Change the autogenerated stub
    }

    #[Route('/employee/remove',name: 'remove_employee')]
    public function removeEmployee(AdminContext $context, Admin\DeleteEmployeeHandler $handler): RedirectResponse
    {
        $employeeId = $context->getRequest()->query->get('entityId');
        try {
            $handler->handle($employeeId);
            $this->addFlash('success', 'Сотрудник успешно уволен');
            $url = $this->adminUrlGenerator->setController(self::class)->setAction(Action::INDEX)->generateUrl();
            return $this->redirect($url);
        } catch (\Exception $exception) {
            throw $exception;
        }
    }
}
